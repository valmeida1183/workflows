name: Build Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # permite roda o workflow manualmente

jobs:
  versioning: # vamos versionar as integrações com o uso de uma action existente: https://github.com/marketplace/actions/git-version
    runs-on: ubuntu-latest
    name: Versioning

    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4
        with: # Essa config abaixo é para a action do git-version poder pegar todo o histório de commits para poder computar sua versão
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Git Version
        id: git-version # Define um ID para essa etapa, que pode ser usado em outras etapas
        uses: codacy/git-version@2.8.2
        with:
          release-branch: main # Aponta branch a ser versionada
          prefix: v # Adiciona um prefixo "v" nas versões, é uma boa prática e deixa mais legível

      - name: Tag the repository
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token de acesso ao repositório, já vem configurado no GitHub Actions
        run: |
          echo "::notice::Tagging the repository with version ${{ steps.git-version.outputs.version }}" # Exibe uma mensagem de aviso no log do GitHub Actions
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "${{ steps.git-version.outputs.version }}" -m "Release version ${{ steps.git-version.outputs.version }}" # Cria uma tag anotada com a versão gerada
          git push --tags # Faz o push da tag para o repositório remoto
          echo "::notice::Repository tagged with version ${{ steps.git-version.outputs.version }}"
        if: github.ref == 'refs/heads/main' # Garante que a tag só será criada se o workflow estiver rodando na branch main

  build-entire-project:
    runs-on: ubuntu-latest
    name: Build Entire Project

    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4

      - name: Setup .NET Core # Instala o .Net no runner
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          cache: true
          cache-dependency-path: ./src/**/packages.lock.json

      - name: Restore .NET dependencies # Faz o restore dos pacotes
        working-directory: ./src
        run: dotnet restore

      - name: Build .NET solution # Faz o build da solution
        working-directory: ./src
        run: dotnet build --no-restore

      - name: Test .NET # Roda os testes e grava um log na pasta TestResults no runner
        run: dotnet test --no-build --no-restore ./src/Todo.Api.sln --logger trx --results-directory "TestResults"

      - uses: actions/upload-artifact@v4 # Action para fazer o upload de algum artefato, no caso o arquivo de log dos testes
        with:
          name: dotnet-test-results
          path: TestResults

      - name: Setup Node.js # Instala o Node.js no runner
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./src/web

      - name: Install Npm packages # Instala os pacotes npm no frontend
        working-directory: ./src/web
        run: npm install

      - name: Build React project # Faz o build no projeto frontend react
        working-directory: ./src/web
        run: npm run build
