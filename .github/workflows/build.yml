name: Build Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # permite roda o workflow manualmente

concurrency: # Garante que apenas uma execução do workflow ocorra por vez, evitando conflitos
  group: ${{ github.workflow }}-${{ github.ref }} # Agrupa as execuções por workflow e branch
  cancel-in-progress: true # Cancela execuções anteriores em andamento se uma nova for iniciada

jobs:
  versioning: # vamos versionar as integrações com o uso de uma action existente: https://github.com/marketplace/actions/git-version
    runs-on: ubuntu-latest
    name: Versioning
    permissions: # Permissões necessárias para o job, nesse caso, para escrever no repositório
      contents: write

    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4
        with: # Essa config abaixo é para a action do git-version poder pegar todo o histório de commits para poder computar sua versão
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Git Version
        id: git-version # Define um ID para essa etapa, que pode ser usado em outras etapas
        uses: codacy/git-version@2.8.2
        with:
          release-branch: main # Aponta branch a ser versionada
          prefix: v # Adiciona um prefixo "v" nas versões, é uma boa prática e deixa mais legível

      - name: Tag the repository
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token de acesso ao repositório, já vem configurado no GitHub Actions
        run: |
          echo "::notice::Tagging the repository with version ${{ steps.git-version.outputs.version }}" # Exibe uma mensagem de aviso no log do GitHub Actions
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "${{ steps.git-version.outputs.version }}" -m "Release version ${{ steps.git-version.outputs.version }}" # Cria uma tag anotada com a versão gerada
          git push --tags # Faz o push da tag para o repositório remoto
          echo "::notice::Repository tagged with version ${{ steps.git-version.outputs.version }}"
        if: github.ref == 'refs/heads/main' # Garante que a tag só será criada se o workflow estiver rodando na branch main

  backend-build-and-test:
    needs: versioning # Define que esse job depende do job de versionamento, ou seja, só será executado após o término do job de versionamento
    runs-on: ubuntu-latest
    name: Backend Build and Test

    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4

      - name: Setup .NET Core # Instala o .Net no runner
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          cache: true
          cache-dependency-path: ./src/**/packages.lock.json

      - name: Restore .NET dependencies # Faz o restore dos pacotes
        working-directory: ./src
        run: dotnet restore

      - name: Build .NET solution # Faz o build da solution
        working-directory: ./src
        run: dotnet build --no-restore --configuration Release # O parâmetro --no-restore é usado para não restaurar os pacotes novamente, já que o restore foi feito anteriormente

      - name: Test .NET # Roda os testes e grava um log na pasta TestResults no runner
        run: |
          dotnet test --no-build --no-restore ./src/Todo.Api.sln --configuration Release --logger trx --results-directory "TestResults"

      - uses: actions/upload-artifact@v4 # Action para fazer o upload de algum artefato, no caso o arquivo de log dos testes
        with:
          name: dotnet-test-results
          path: TestResults

  backend-lint:
    needs: versioning # Define que esse job depende do job de versionamento, ou seja, só será executado após o término do job de versionamento
    runs-on: ubuntu-latest
    name: Backend Lint

    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4
        with: # super-linter precisa do histórico completo para funcionar corretamente
          fetch-depth: 0

      - uses: github/super-linter@v6 # Usa o super-linter para rodar o lint no código do backend
        env:
          DEFAULT_BRANCH: main # Define a branch padrão para o linter, nesse caso, a branch main
          VALIDATE_ALL_CODEBASE: 'false' # Desabilita a validação de todo o código, para rodar apenas no código modificado
          VALIDATE_YAML: 'true' # Habilita a validação de arquivos YAML
          VALIDATE_CSHARP: 'true' # Habilita a validação de arquivos C#
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token de acesso ao repositório, já vem configurado no GitHub Actions
        with:
          run-linter: dotnet # Especifica que queremos rodar o linter para .NET

  frontend-build-and-test:
    needs: versioning # Define que esse job depende do job de versionamento, ou seja, só será executado após o término do job de versionamento
    runs-on: ubuntu-latest
    name: Frontend Build and Test
    defaults:
      run:
        working-directory: ./src/web # Define o diretório de trabalho padrão para as etapas desse job, assim não é necessário especificar o diretório em cada etapa

    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4

      - name: Setup Node.js # Instala o Node.js no runner
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./src/web

      - name: Install Npm packages # Instala os pacotes npm no frontend
        run: npm ci # O comando npm ci é usado para instalar as dependências do projeto de forma limpa, removendo a pasta node_modules e instalando novamente

      - name: Run Lint # Roda o lint no código do frontend
        run: npm run lint

      - name: Build React project # Faz o build no projeto frontend react
        run: npm run build

  frontend-lint:
    needs: versioning # Define que esse job depende do job de versionamento, ou seja, só será executado após o término do job de versionamento
    runs-on: ubuntu-latest
    name: Frontend Lint
    defaults:
      run:
        working-directory: ./src/web # Define o diretório de trabalho padrão para as etapas desse job, assim não é necessário especificar o diretório em cada etapa

    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4

      - name: Setup Node.js # Instala o Node.js no runner
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./src/web

      - name: Install Npm packages # Instala os pacotes npm no frontend
        run: npm ci # O comando npm ci é usado para instalar as dependências do projeto de forma limpa, removendo a pasta node_modules e instalando novamente

      - name: Run Lint # Roda o lint no código do frontend
        run: npm run lint

  dependency-check:
    needs: versioning # Define que esse job depende do job de versionamento, ou seja, só será executado após o término do job de versionamento
    runs-on: ubuntu-latest
    name: Dependency Check
    permissions: # Permissões necessárias para o job, nesse caso, para ler o repositório
      contents: read
      pull-requests: write # Permissão para escrever em pull requests, necessária para a action de revisão de dependências
    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4

      - name: Dependency Review # Roda a action de revisão de dependências
        uses: actions/dependency-review-action@v4

  code-security-check:
    needs: versioning # Define que esse job depende do job de versionamento, ou seja, só será executado após o término do job de versionamento
    runs-on: ubuntu-latest
    name: Code Security Check
    permissions: # Permissões necessárias para o job, nesse caso, para ler o repositório
      security-events: write # Permissão para escrever eventos de segurança, necessária para a action de revisão de segurança
      packages: read # Permissão para ler pacotes, necessária para a action de revisão de segurança
      actions: read # Permissão para ler ações, necessária para a action de revisão de segurança
      contents: read # Permissão para ler o conteúdo do repositório, necessária para a action de revisão de segurança
    strategy: # Define uma estratégia de matriz para rodar o CodeQL em diferentes linguagens
      matrix:
        include:
          - name: Backend # Nome do job para o backend
            language: csharp # Linguagem C# para o backend
            build-mode: autobuild # Modo de build autobuild, usado para projetos .NET
          - name: Frontend # Nome do job para o frontend
            language: javascript # Linguagem JavaScript para o frontend
            build-mode: none # Modo de build none, usado para projetos JavaScript e TypeScript
    steps:
      - name: Checkout code # Serve para fazer o checkout do código do projeto para o runner (máquina que roda o pipeline)
        uses: actions/checkout@v4

      - name: Initialize CodeQL - ${{ matrix.name }} # Inicializa o CodeQL para análise de segurança do código
        # A variável matrix.name é usada para diferenciar os jobs de backend e frontend
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }} # Especifica a linguagem a ser analisada, que pode ser C# ou JavaScript
          build-mode: ${{ matrix.build-mode }} # Especifica o modo de build, que pode ser autobuild para C# ou none para JavaScript

      - name: Run CodeQL Analysis - ${{ matrix.name }} # Roda a análise de segurança do código usando o CodeQL
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}' # Define a categoria da análise como segurança para C# e JavaScript

